name: Multi Platform Builder - Test

on: push

env:
#  target_cpu: "x86-64"
#  RUSTFLAGS: "-C target_cpu=x86-64"
  features: "safe"
#  TBN_FILENAME: 'tari_base_node'
#  SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#  VCPKGRS_DYNAMIC: 1
#  SQLITE_STATIC: 1
#  SQLITE3_STATIC: 1

jobs:
  build:
    name: Building Binaries
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-18.04]
#        os: [macos-latest]
#        os: [ubuntu-18.04, windows-2019]
        os: [ubuntu-latest, macos-latest, windows-latest]
#        os: [windows-latest, self-hosted]
        features: ["avx2", "safe"]
#        target_cpu: ["x86-64", "ivybridge", "skylake"]
#        target_cpu: ["x86-64", "ivybridge"]
        target_cpu: ["x86-64"]
        exclude:
          - target_cpu: "x86-64"
            features: "avx2"

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
#        toolchain: nightly-2020-06-10
#        components: rustfmt
#        target: ${{ matrix.target }}
        override: true

    # Install OS specific dependencies
    - name: Install Linux dependencies
      if: startsWith(matrix.os,'ubuntu')
      run: sudo apt-get install zip
    - name: Install macOS dependencies
      if: startsWith(matrix.os,'macos')
      run: brew install p7zip cmake
    - name: Install Windows dependencies
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'windows')
      run: |
        choco upgrade zip psutils -y
        dir 'C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master'
        C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 -h

    - name: set environment variables - Nix
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: "!startsWith(matrix.os,'Windows')"
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
#        SHARUN: 'shasum --portable --algorithm 256'
        SHARUN: 'shasum --algorithm 256'
        CC: gcc
        TBN_FILENAME: 'cross-compile-sample'
        TBN_EXT: ''
        S3DESTDIR: 'linux'
        TBN_DIST: '/dist'
    - name: Set environment variables - macOS
      if: startsWith(matrix.os,'macos')
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        S3DESTDIR: 'osx'
    - name: set environment variables - Windows
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'Windows')
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
#        SHARUN: 'pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --portable --algorithm 256'
        SHARUN: 'pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --algorithm 256'
        TBN_FILENAME: 'cross-compile-sample'
        TBN_EXT: '.exe'
        TBN_DIST: '\dist'
        S3DESTDIR: 'windows'
#        SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
#        RUSTFLAGS: '-C target_cpu=${{ target_cpu }}'
#        CC: gcc

    - name: Build binaries
      uses: actions-rs/cargo@v1
      env:
        RUSTFLAGS: '-C target_cpu=${{ matrix.target_cpu }}'
        ROARING_ARCH: '${{ matrix.target_cpu }}'
#        CC: gcc
      with:
#        use-cross: true
        command: build
#        args: --release --features ${{ matrix.features }}
        args: --release

    - shell: bash
#      continue-on-error: true  # WARNING: only for this example, remove it!
      run: |
        ls -la '${{ github.workspace }}'
        ls -la '${{ github.workspace }}/target/release/'
#        ls -la 'C:\ProgramData\chocolatey\lib\psutils\tools'
#        ls -la "${{ github.workspace }}/target/release/"{cross-compile-sample,cross-compile-sample.exe}
#        printenv

    - name: Pre Envs and Binary
      shell: bash
      run: |
        mkdir -p "$GITHUB_WORKSPACE${TBN_DIST}"
        cd "$GITHUB_WORKSPACE${TBN_DIST}"
        #VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml")
        VERSION="v0.1.0"
        echo ::set-env name=VERSION::${VERSION}
        BINFILE="${TBN_FILENAME}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}-${VERSION}${TBN_EXT}"
        echo ::set-env name=BINFILE::${BINFILE}
        echo "Copying file ${BINFILE} too $(pwd)"
        cp -v "$GITHUB_WORKSPACE/target/release/${TBN_FILENAME}${TBN_EXT}" "./${BINFILE}"

    - name: Import macOS Certs
      if: startsWith(matrix.os,'macos')
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.TARICERTIFICATES }}
        p12-password: ${{ secrets.TARICERTIFICATESPWD }}

    - name: Sign macOS Binary
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'macos')
      shell: bash
      run: |
        # echo "Pre Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        # codesign --display --verbose=4 --verify --check-notarization --deep "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}" | exit 0
        # spctl --assess --verbose "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}" | exit 0
        # codesign --test-requirement="=notarized" --verify -vvvv "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}"
        # spctl --assess --type install --context context:primary-signature -v "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}"
        # spctl --assess --type execute --context context:primary-signature -v "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}"
        # spctl --assess --type open --context context:primary-signature -v "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}"
        # xcrun stapler validate "${GITHUB_WORKSPACE}/dist/${{ env.BINFILE }}"
        echo "Pre Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        codesign --display --verbose=4 "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        echo "Signed OSX Binary - ${{ env.BINFILE }} ..."
        codesign --options runtime --force --timestamp --verify --verbose --sign "${{ secrets.OSXSIGN }}" "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        #echo "Post Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        #codesign --display --verbose=4 --verify --check-notarization --deep "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0
        #spctl --assess --verbose "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0

    - name: Archive and Sign Binaries
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        echo "Archive ${{ env.BINFILE }} too ${{ env.BINFILE }}.zip"
        cd "$GITHUB_WORKSPACE${{ env.TBN_DIST }}/"
        zip -j "${{ env.BINFILE }}.zip" "${{ env.BINFILE }}"
        echo "Compute shasum"
        ${SHARUN} "${{ env.BINFILE }}.zip" >> "${{ env.BINFILE }}.zip.sha256"
        cat "${{ env.BINFILE }}.zip.sha256"
        echo "Verifications is "
        ${SHARUN} --check "${{ env.BINFILE }}.zip.sha256"
        ls -la
        pwd
#        printenv

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.TBN_FILENAME }} - ${{ env.VERSION  }} - release - ${{ matrix.os }} ${{ matrix.target_cpu }} ${{ matrix.features }}
        path: '${{ github.workspace }}${{ env.TBN_DIST }}/${{ env.BINFILE }}.zip*'

    - name: Sync dist to S3 - Bash
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        echo "Starting upload ..."
        aws --debug s3 ${{ env.S3CMD }} --region ${{ secrets.AWS_REGION }} \
          ${{ env.SOURCE }} \
          s3://${{ secrets.AWS_S3_BUCKET }}/${{ env.DEST_DIR }} \
          ${{ env.S3OPTIONS }}
        echo "$? - Done!"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE: ${{ github.workspace }}${{ env.TBN_DIST }}
        DEST_DIR: 'test/${{ env.S3DESTDIR }}/'
        S3CMD: 'cp'
        S3OPTIONS: '--recursive'
#        S3OPTIONS: '--recursive --exclude "*" --include "*.zip*"'
#        S3OPTIONS: '--acl public-read'
#        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
#        AWS_REGION: '${{ secrets.AWS_REGION }}'
