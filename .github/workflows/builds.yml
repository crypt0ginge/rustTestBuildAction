name: Multi Platform Builder - Test

on: push

env:
  target_cpu: "x86-64"
  RUSTFLAGS: "-C target_cpu=x86-64"
  features: "safe"
#  TBN_FILENAME: 'tari_base_node'
#  SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#  VCPKGRS_DYNAMIC: 1
#  SQLITE_STATIC: 1
#  SQLITE3_STATIC: 1

jobs:
  build:
    name: Building Binaries
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
#        toolchain: nightly-2020-06-10
#        components: rustfmt
#        target: ${{ matrix.target }}
        override: true

    # Install OS specific dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install zip
    - name: Install macOS dependencies
      if: matrix.os == 'macOS-latest'
      run: brew install p7zip cmake
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco update zip psutils -y
        dir 'C:\ProgramData\chocolatey\lib\psutils\tools'

#        ls -la 'C:\ProgramData\chocolatey\lib\psutils\tools'

    - name: set environment variables - Nix
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: "!startsWith(matrix.os,'Windows')"
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        CC: gcc
        TBN_FILENAME: 'cross-compile-sample'
    - name: set environment variables - Windows
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'Windows')
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        TBN_FILENAME: 'cross-compile-sample.exe'
#        SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
#        CC: gcc

    - name: Build binaries
      uses: actions-rs/cargo@v1
      env:
        CC: gcc
      with:
#        use-cross: true
        command: build
#        args: --release --target=${{ matrix.target }}
        args: --release
    - shell: bash
      continue-on-error: true  # WARNING: only for this example, remove it!
      run: |
        ls -la '${{ github.workspace }}'
        ls -la '${{ github.workspace }}/target/release/'
#        ls -la 'C:\ProgramData\chocolatey\lib\psutils\tools'
#        ls -la "${{ github.workspace }}/target/release/"{cross-compile-sample,cross-compile-sample.exe}

    - name: Prep binaries
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        printenv
        mkdir -p "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        cd "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        #VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml")
        VERSION="v0.1.0"
        BINFILE="${TBN_FILENAME}-${{ matrix.os }}-${target_cpu}-${features}-${VERSION}"
        echo "Filename is $BINFILE"
        cp -v "$GITHUB_WORKSPACE/target/release/${TBN_FILENAME}" "./$BINFILE"
        echo "Archive "${BINFILE} too "${BINFILE}.zip"
        zip -j "${BINFILE}.zip" "${BINFILE}"
        echo "Compute shasum"
        shasum -a 256 "${BINFILE}.zip" ${BINFILE} >> "${BINFILE}.zip.sha256"
        cat "${BINFILE}.zip.sha256"
        echo "Verifications is "
        shasum -a 256 --check "${BINFILE}.zip.sha256"

    - name: Upload Windows binary
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: release - ${{ matrix.os }}
        path: '${{ github.workspace }}/target/release/cross-compile-sample.exe'
    - name: Upload Nix binary
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: release - ${{ matrix.os }}
        path: '${{ github.workspace }}/target/release/cross-compile-sample'
